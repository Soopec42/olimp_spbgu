#include <iostream>
#include <vector>


typedef long long ll;
using namespace std;

vector<long long> qsort(vector<long long> vect)
{
	long long sredn;
	vector<long long> dom, poslem, fmas, smas;
	if (vect.size() <= 1)
		return vect;
	if (vect.size() > 1)
		sredn = vect[0];
	for (long long k = 1; k < vect.size(); k++)
	{
		if (vect[k] < sredn)
			dom.push_back(vect[k]);
		else
			poslem.push_back(vect[k]);
	}
	fmas = qsort(dom);
	smas = qsort(poslem);

	fmas.push_back(sredn);

	for (long long k = 0; k < poslem.size(); k++)
	{
		fmas.push_back(poslem[k]);
	}
	return fmas;
}



int main()
{
	long long n;
	cin >> n;
	vector<long long> mas(n), news;
	for (long long& x : mas)
	{
		cin >> x;
	}
	news = qsort(mas);
	ll p = 1e15;
	long long l = 0, r = 2, ans = p, sum = news[0] + news[1];
	while (r < n)
	{
		if (sum <= news[r]) {
			sum += news[r++];
		}
		else {
			ans = min(ans, r - l + 1);
			sum -= news[l++];
		}
	}
	if (ans == p) {
		cout << -1;
	}
	else {
		cout << ans;
	}


}
